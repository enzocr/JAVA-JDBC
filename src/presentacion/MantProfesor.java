/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package presentacion;

import java.util.ArrayList;
import java.util.List;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import negocio.bo.ProfesorBo;
import negocio.clases.Profesor;
import utilities.ValidationUtil;

/**
 *
 * @author enzoq
 */
public class MantProfesor extends javax.swing.JFrame {

    private ProfesorBo pb;
    private DefaultTableModel modelProfesor;

    /**
     * Creates new form MantProfesor
     */
    public MantProfesor() {
        initComponents();
        this.pb = new ProfesorBo();
        this.modelProfesor = new DefaultTableModel();
        fillTable();
    }

    public JTable getTableProfesor() {
        return tableProfesor;
    }

    public void setTableProfesor(JTable tableProfesor) {
        this.tableProfesor = tableProfesor;
    }

    public DefaultTableModel getModelProfesor() {
        return modelProfesor;
    }

    public void setModelProfesor(DefaultTableModel modelProfesor) {
        this.modelProfesor = modelProfesor;
    }

    public ProfesorBo getPb() {
        return pb;
    }

    public void setPb(ProfesorBo pb) {
        this.pb = pb;
    }

    public void fillTable() {

        this.modelProfesor = new DefaultTableModel() {
            private static final long serialVersionUID = 1L;

            @Override
            public boolean isCellEditable(int row, int colum) {
                return false;
            }
        };
        this.tableProfesor.getTableHeader().setReorderingAllowed(false);

        getModelProfesor().setColumnCount(0);
        getModelProfesor().addColumn("Cédula");
        getModelProfesor().addColumn("Nombre");
        getModelProfesor().addColumn("Salario");
        getModelProfesor().addColumn("Escuela");

        List<Profesor> list = getPb().getAll();

        if (list != null) {
            getModelProfesor().setNumRows(list.size());

            for (int i = 0; i < list.size(); i++) {
                Profesor prof = list.get(i);
                getModelProfesor().setValueAt(prof.getCedula(), i, 0);//i=fila 0=columna
                getModelProfesor().setValueAt(prof.getNombre(), i, 1);
                getModelProfesor().setValueAt(prof.getSalario(), i, 2);
                getModelProfesor().setValueAt(prof.getEscuela(), i, 3);
            }
        }

        this.tableProfesor.setModel(getModelProfesor());

    }

    private void fillTable(List<Profesor> list) {

        this.modelProfesor = new DefaultTableModel() {
            private static final long serialVersionUID = 1L;

            @Override
            public boolean isCellEditable(int row, int colum) {
                return false;
            }
        };
        this.tableProfesor.getTableHeader().setReorderingAllowed(false);

        getModelProfesor().setColumnCount(0);
        getModelProfesor().addColumn("Cédula");
        getModelProfesor().addColumn("Nombre");
        getModelProfesor().addColumn("Salario");
        getModelProfesor().addColumn("Escuela");

        if (list != null) {
            getModelProfesor().setNumRows(list.size());

            for (int i = 0; i < list.size(); i++) {
                Profesor prof = list.get(i);
                getModelProfesor().setValueAt(prof.getCedula(), i, 0);//i=fila 0=columna
                getModelProfesor().setValueAt(prof.getNombre(), i, 1);
                getModelProfesor().setValueAt(prof.getSalario(), i, 2);
                getModelProfesor().setValueAt(prof.getEscuela(), i, 3);
            }
        }

        this.tableProfesor.setModel(getModelProfesor());

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        cedulaTextField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        nombreTextField = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        salarioTextField = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        escuelaTextField = new javax.swing.JTextField();
        addButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        updateButton = new javax.swing.JButton();
        cleanButton = new javax.swing.JButton();
        getByIdButton = new javax.swing.JButton();
        getByNameButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableProfesor = new javax.swing.JTable();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setForeground(new java.awt.Color(153, 0, 255));
        jLabel1.setText("Mantenimiento de profesores");

        jLabel2.setText("Cédula: ");

        cedulaTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cedulaTextFieldActionPerformed(evt);
            }
        });

        jLabel3.setText("Nombre: ");

        nombreTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nombreTextFieldActionPerformed(evt);
            }
        });

        jLabel4.setText("Salario: ");

        jLabel5.setText("Escuela: ");

        addButton.setText("Agregar");
        addButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                addButtonMouseClicked(evt);
            }
        });
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        deleteButton.setText("Eliminar");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        updateButton.setText("Modificar");
        updateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateButtonActionPerformed(evt);
            }
        });

        cleanButton.setText("Limpiar");
        cleanButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cleanButtonActionPerformed(evt);
            }
        });

        getByIdButton.setText("Consultar por cedula");
        getByIdButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getByIdButtonActionPerformed(evt);
            }
        });

        getByNameButton.setText("Consultar por nombre");
        getByNameButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getByNameButtonActionPerformed(evt);
            }
        });

        tableProfesor.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        tableProfesor.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableProfesorMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tableProfesor);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addGap(35, 35, 35)
                            .addComponent(addButton)
                            .addGap(58, 58, 58)
                            .addComponent(deleteButton)
                            .addGap(41, 41, 41)
                            .addComponent(updateButton))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(181, 181, 181)
                                .addComponent(jLabel1))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(33, 33, 33)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(getByIdButton)
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(44, 44, 44)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(cleanButton)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel2))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(cedulaTextField)
                                    .addComponent(salarioTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(24, 24, 24)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel5)
                                    .addComponent(jLabel3))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(nombreTextField)
                                    .addComponent(escuelaTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(getByNameButton))))
                .addContainerGap(39, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(jLabel1)
                .addGap(40, 40, 40)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(cedulaTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(nombreTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(salarioTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(escuelaTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(46, 46, 46)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addButton)
                    .addComponent(deleteButton)
                    .addComponent(updateButton)
                    .addComponent(cleanButton))
                .addGap(36, 36, 36)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(getByIdButton)
                    .addComponent(getByNameButton))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(36, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cedulaTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cedulaTextFieldActionPerformed

    }//GEN-LAST:event_cedulaTextFieldActionPerformed
    private boolean validateData() {
        if (!this.cedulaTextField.getText().matches("[0-9]+")) {
            ValidationUtil.showJOptionPane("NO se permiten letras en la cedula");
            return false;
        }

        if (!this.nombreTextField.getText().matches("[a-zA-Z_]+")) {
            ValidationUtil.showJOptionPane("Digite nombre valido");
            return false;
        }

        if (this.cedulaTextField.getText().trim().length() == 0) {
            ValidationUtil.showJOptionPane("Digite cedula del profesor");
            return false;
        }

        if (this.nombreTextField.getText().equals("")) {
            ValidationUtil.showJOptionPane("Digite nombre del profesor");
            return false;
        }
        if (this.escuelaTextField.getText().trim().equals("")) {
            ValidationUtil.showJOptionPane("Digite escuela");
            return false;
        }
        if (this.salarioTextField.getText().trim().length() == 0) {
            ValidationUtil.showJOptionPane("Digite salario");
            return false;

        } else {
            try {
                Double.parseDouble(this.salarioTextField.getText());
            } catch (NumberFormatException nfe) {
                ValidationUtil.showJOptionPane("Solo se permiten decimales en el salario");
                return false;
            }

        }

        return true;
    }
    private void nombreTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nombreTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nombreTextFieldActionPerformed

    private void cleanButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cleanButtonActionPerformed
        cleanTextFields();
    }//GEN-LAST:event_cleanButtonActionPerformed

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed

        if (validateData()) {

            Profesor p = new Profesor(
                    Integer.parseInt(this.cedulaTextField.getText()),
                    this.nombreTextField.getText(),
                    Double.parseDouble(this.salarioTextField.getText()),
                    this.escuelaTextField.getText());

            int res = getPb().insert(p);

            switch (res) {
                case 0:
                    ValidationUtil.showJOptionPane("Profesor registrado");
                    cleanTextFields();
                    break;
                case 1:
                    ValidationUtil.showJOptionPane("No se pudo conectar a la BD");
                    break;
                case 2:
                    ValidationUtil.showJOptionPane("Ya existe profesor con esta cedula");
                    break;
                case 3:
                    ValidationUtil.showJOptionPane("Error inesperado");
                    break;
            }

        }

    }//GEN-LAST:event_addButtonActionPerformed

    private void addButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addButtonMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_addButtonMouseClicked

    private void tableProfesorMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableProfesorMouseClicked
        if (evt.getClickCount() == 2) {
            int row = tableProfesor.getSelectedRow();
            cedulaTextField.setText(getTableProfesor().getValueAt(row, 0).toString());
            nombreTextField.setText(getTableProfesor().getValueAt(row, 1).toString());
            salarioTextField.setText(getTableProfesor().getValueAt(row, 2).toString());
            escuelaTextField.setText(getTableProfesor().getValueAt(row, 3).toString());
            cedulaTextField.setEnabled(false);
        }
    }//GEN-LAST:event_tableProfesorMouseClicked

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        if (cedulaTextField.getText().trim().equals("")) {
            ValidationUtil.showJOptionPane("Ingresar cédula a eliminar");
        } else {
            try {
                int cedula = Integer.parseInt(cedulaTextField.getText());
                Profesor p = new Profesor();
                p.setCedula(cedula);
                int res = getPb().delete(p);

                switch (res) {
                    case 0:
                        ValidationUtil.showJOptionPane("Profesor NO eliminado");
                        break;
                    case 1:
                        ValidationUtil.showJOptionPane("Profesor ELIMINADO");
                        break;
                    case 2:
                        ValidationUtil.showJOptionPane("NO hubo conexion con base de datos");
                        break;
                    case 3:
                        ValidationUtil.showJOptionPane("Error inesperado");
                        break;
                    case 4:
                        ValidationUtil.showJOptionPane("Profesor tiene registros asociados");
                }
                cleanTextFields();

            } catch (NumberFormatException nfe) {
                ValidationUtil.showJOptionPane("Solo se permiten numeros");
            }
        }
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void updateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateButtonActionPerformed
        if (validateData()) {

            Profesor p = new Profesor(
                    Integer.parseInt(this.cedulaTextField.getText()),
                    this.nombreTextField.getText(),
                    Double.parseDouble(this.salarioTextField.getText()),
                    this.escuelaTextField.getText());

            int res = getPb().update(p);

            switch (res) {
                case 0:
                    ValidationUtil.showJOptionPane("Profesor modificado");
                    break;
                case 1:
                    ValidationUtil.showJOptionPane("No se pudo conectar a la BD");
                    break;
                case 2:
                    ValidationUtil.showJOptionPane("Ya existe profesor con esta cedula");
                    break;
                case 3:
                    ValidationUtil.showJOptionPane("Error inesperado");
                    break;
            }

        }
        cleanTextFields();


    }//GEN-LAST:event_updateButtonActionPerformed

    private void getByNameButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getByNameButtonActionPerformed

        if (!"".equals(this.nombreTextField.getText())) {
            List<Profesor> list = getPb().getByName(this.nombreTextField.getText());
            fillTable(list);
        } else {
            ValidationUtil.showJOptionPane("Digitar nombre para búsqueda");
        }


    }//GEN-LAST:event_getByNameButtonActionPerformed

    private void getByIdButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getByIdButtonActionPerformed
        if (!this.cedulaTextField.getText().matches("[0-9]+")) {
            ValidationUtil.showJOptionPane("NO se permiten letras");
        } else {
            int cedula = Integer.parseInt(this.cedulaTextField.getText());
            Profesor p = getPb().getById(cedula);
            List<Profesor> list = new ArrayList<>();
            list.add(p);
            fillTable(list);
        }


    }//GEN-LAST:event_getByIdButtonActionPerformed
    private void cleanTextFields() {
        this.cedulaTextField.setText("");
        this.nombreTextField.setText("");
        this.salarioTextField.setText("");
        this.escuelaTextField.setText("");
        this.cedulaTextField.setEnabled(true);
        fillTable();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MantProfesor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MantProfesor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MantProfesor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MantProfesor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MantProfesor().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JTextField cedulaTextField;
    private javax.swing.JButton cleanButton;
    private javax.swing.JButton deleteButton;
    private javax.swing.JTextField escuelaTextField;
    private javax.swing.JButton getByIdButton;
    private javax.swing.JButton getByNameButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField nombreTextField;
    private javax.swing.JTextField salarioTextField;
    private javax.swing.JTable tableProfesor;
    private javax.swing.JButton updateButton;
    // End of variables declaration//GEN-END:variables

}
